// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    id, name, role, email, password, created_at, created_by, updated_at, updated_by
) VALUES (
    gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id
`

type CreateUserParams struct {
	Name      string
	Role      string
	Email     string
	Password  string
	CreatedAt pgtype.Timestamp
	CreatedBy uuid.UUID
	UpdatedAt pgtype.Timestamp
	UpdatedBy uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Role,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, role, email, password FROM "user"
WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID       uuid.UUID
	Name     string
	Role     string
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Email,
		&i.Password,
	)
	return i, err
}
